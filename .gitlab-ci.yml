stages:
  - prepare
  - build
  - test

build-ci-env:
  stage: prepare
  when: manual
  image: docker:19.03
  services: ['docker:dind']
  variables:
    GIT_STRATEGY: none
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker run -it --detach --name ci-env docker:19.03
    - docker exec ci-env apk add git make pigz py3-pip
    - docker commit ci-env $CI_REGISTRY_IMAGE/ci-env
    - docker push $CI_REGISTRY_IMAGE/ci-env

build-tester:
  stage: build
  image: $CI_REGISTRY_IMAGE/ci-env
  services: ['docker:dind']
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/tester:$CI_COMMIT_SHA || true
    - docker pull $CI_REGISTRY_IMAGE/tester:$CI_COMMIT_BEFORE_SHA || true
    - docker pull $CI_REGISTRY_IMAGE/tester:$CI_COMMIT_BRANCH || true
    - >
      docker build
      --file Dockerfile.ci
      --cache-from $CI_REGISTRY_IMAGE/tester:$CI_COMMIT_SHA
      --cache-from $CI_REGISTRY_IMAGE/tester:$CI_COMMIT_BEFORE_SHA
      --cache-from $CI_REGISTRY_IMAGE/tester:$CI_COMMIT_BRANCH
      --tag $CI_REGISTRY_IMAGE/tester:$CI_COMMIT_SHA
      --tag $CI_REGISTRY_IMAGE/tester:$CI_COMMIT_BEFORE_SHA
      --tag $CI_REGISTRY_IMAGE/tester:$CI_COMMIT_BRANCH
      --tag tester
      .
    - docker push $CI_REGISTRY_IMAGE/tester:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/tester:$CI_COMMIT_BRANCH
    - docker save tester | pigz > tester.tar.gz
  rules:
    - changes:
        - .gitlab-ci.yml
        - .dockerignore
        - Dockerfile.ci
    - when: manual
  artifacts:
    paths:
      - tester.tar.gz

get-tester:
  stage: build
  image: $CI_REGISTRY_IMAGE/ci-env
  services: ['docker:dind']
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - wget https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/jobs/artifacts/CI_COMMIT_BRANCH/raw/tester.tar.gz?job=build-tester -O tester.tar.gz
  except:
    changes:
      - .gitlab-ci.yml
      - .dockerignore
      - Dockerfile.ci
  artifacts:
    paths:
      - tester.tar.gz

build-dist:
  stage: build
  image: python:3.11-alpine
  script:
    - python setup.py sdist
  artifacts:
    paths:
      - dist

test:
  stage: test
  image: $CI_REGISTRY_IMAGE/ci-env
  services: ['docker:dind']
  before_script:
    - unpigz tester.tar.gz | docker load
    - ls -A | grep -v -E 'Makefile|tests' | xargs -r -I% rm -rf %
    - docker run -it --name tester -v $PWD:/PRJ tester
    - docker exec tester pip install dist/*.tar.gz
  script:
    - docker exec tester make tests
  coverage: '/TOTAL .+ (\d+\.\d+)%/'