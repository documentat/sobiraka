stages:
  - manual
  - build
  - test
  - publish

################################################################################

build-ci-env:
  stage: manual
  when: manual
  image: docker
  services: ['docker:dind']
  variables:
    GIT_STRATEGY: none
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker run -it --detach --name ci-env docker
    - docker exec ci-env apk add git make pigz py3-pip
    - docker commit ci-env $CI_REGISTRY_IMAGE/ci-env:1
    - docker push $CI_REGISTRY_IMAGE/ci-env:1


################################################################################

build-dist:
  stage: build
  image: python:3.11-slim-bullseye
  script:
    - python setup.py sdist
  artifacts:
    paths:
      - dist

################################################################################

.build-docker:
  stage: build
  image: $CI_REGISTRY_IMAGE/ci-env:1
  services: ['docker:dind']
  variables:
    DOCKER_BUILDKIT: 1
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script: >
    for STAGE in $(cat Dockerfile.$IMAGE | grep -E 'FROM \S+ AS \S+' | cut -d' ' -f4);
    do
      docker pull $CI_REGISTRY_IMAGE/cache/$IMAGE:branch-master-$STAGE || true;
      docker pull $CI_REGISTRY_IMAGE/cache/$IMAGE:branch-$CI_COMMIT_REF_NAME-$STAGE || true;
      docker pull $CI_REGISTRY_IMAGE/cache/$IMAGE:commit-$CI_COMMIT_SHA-$STAGE || true;
      docker pull $CI_REGISTRY_IMAGE/cache/$IMAGE:commit-$CI_COMMIT_BEFORE_SHA-$STAGE || true;

      docker build . --file Dockerfile.$IMAGE --target $STAGE --tag $IMAGE:$STAGE;

      docker tag $IMAGE:$STAGE $CI_REGISTRY_IMAGE/cache/$IMAGE:branch-$CI_COMMIT_REF_NAME-$STAGE;
      docker push $CI_REGISTRY_IMAGE/cache/$IMAGE:branch-$CI_COMMIT_REF_NAME-$STAGE;

      docker tag $IMAGE:$STAGE $CI_REGISTRY_IMAGE/cache/$IMAGE:commit-$CI_COMMIT_SHA-$STAGE;
      docker push $CI_REGISTRY_IMAGE/cache/$IMAGE:commit-$CI_COMMIT_SHA-$STAGE;
    done;
    docker save $IMAGE:sobiraka | pigz > $IMAGE.tar.gz;
  artifacts:
    paths:
      - $IMAGE.tar.gz

build-tester:
  extends: .build-docker
  variables:
    IMAGE: tester

build-release:
  extends: .build-docker
  variables:
    IMAGE: release

################################################################################

test-pip:
  stage: test
  needs: [build-tester, build-dist]
  image: $CI_REGISTRY_IMAGE/ci-env:1
  services: ['docker:dind']
  variables:
    GIT_STRATEGY: fetch
  before_script:
    - docker load < tester.tar.gz
    - rm tester.tar.gz
    - docker run --detach --rm --name tester -v $PWD:/PRJ --entrypoint dd tester if=/dev/zero of=/dev/null
    - docker exec tester pip install dist/*.tar.gz
    - rm dist/*.tar.gz
  script:
    - git checkout -- Makefile tests
    - docker exec tester make tests
  coverage: '/TOTAL .+ (\d+\.\d+)%/'

test-src:
  stage: test
  needs: [build-tester]
  image: $CI_REGISTRY_IMAGE/ci-env:1
  services: ['docker:dind']
  before_script:
    - docker load < tester.tar.gz
    - rm tester.tar.gz
    - docker run --detach --rm --name tester -v $PWD:/PRJ --entrypoint dd tester if=/dev/zero of=/dev/null
  script:
    - docker exec tester make tests

################################################################################

publish:
  stage: publish
  needs:
    - job: build-release
      artifacts: true
    - job: test-pip
      artifacts: false
    - job: test-src
      artifacts: false
  image: $CI_REGISTRY_IMAGE/ci-env:1
  services: ['docker:dind']
  variables:
    GIT_STRATEGY: none
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker load < release.tar.gz
    - docker tag release-sobiraka $CI_REGISTRY_IMAGE/sobiraka:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/sobiraka:$CI_COMMIT_SHA