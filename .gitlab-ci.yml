stages:
  - build
  - test

################################################################################

build-dist:
  stage: build
  image: python:3.11-slim-bullseye
  script:
    - python setup.py sdist
  artifacts:
    paths:
      - dist

################################################################################

.build-docker:
  stage: build
  image: docker
  services: ['docker:dind']
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/$IMAGE:master || true
    - docker pull $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_REF_NAME || true
    - docker pull $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_SHA || true
    - docker pull $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_BEFORE_SHA || true
    - >
      docker build .
      --file Dockerfile.$IMAGE
      --cache-from $CI_REGISTRY_IMAGE/$IMAGE:master
      --cache-from $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_REF_NAME
      --cache-from $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_SHA
      --cache-from $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_BEFORE_SHA
      --tag $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_REF_NAME
      --tag $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_SHA
      --tag $IMAGE
    - docker push $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE/$IMAGE:$CI_COMMIT_SHA
    - docker save $IMAGE | gzip > $IMAGE.tar.gz
  artifacts:
    paths:
      - $IMAGE.tar.gz

build-tester:
  extends: .build-docker
  variables:
    IMAGE: tester

build-release:
  extends: .build-docker
  variables:
    IMAGE: release

################################################################################

.test-docker:
  stage: test
  image: docker
  services: ['docker:dind']
  before_script:
    - docker load < $IMAGE.tar.gz
    - docker run --detach --name $IMAGE -v $PWD:/PRJ $IMAGE cat /dev/zero
    - rm $IMAGE.tar.gz

test-pip:
  extends: .test-docker
  needs: [build-tester, build-dist]
  variables:
    IMAGE: tester
  script:
    - docker exec $IMAGE pip install dist/*.tar.gz
    - ls -A | grep -v -E 'Makefile|tests' | xargs -r -I% rm -rf %
    - docker exec tester make tests
  coverage: '/TOTAL .+ (\d+\.\d+)%/'

test-release:
  extends: .test-docker
  needs: [build-release]
  variables:
    IMAGE: release
  script:
    - ls -A | grep -v -E 'Makefile|tests' | xargs -r -I% rm -rf %
    - docker exec $IMAGE make tests