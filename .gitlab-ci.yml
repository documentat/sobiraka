variables:
  PYTHON: 3.13
  PANDOC: 3.6

  PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip

  PANDOC_URL: https://github.com/jgm/pandoc/releases/download/$PANDOC/pandoc-$PANDOC-linux-amd64.tar.gz
  PANDOC_FILENAME: pandoc-$PANDOC-linux-amd64.tar.gz

  LATO_URL: https://www.latofonts.com/download/lato2ofl-zip/
  JETBRAINS_MONO_URL: https://download.jetbrains.com/fonts/JetBrainsMono-2.304.zip

default:
  image: python:$PYTHON-alpine3.20
  cache:
    when: always
    key: $CI_JOB_NAME
    paths:
      - .cache
      - node_modules

stages:
  - Main
  - Test with Python 3.11
  - Test with Python 3.12
  - Test with Python 3.13
  - Publish

# ------------------------------------------------------------------------------
# region Templates

.sobiraka_pandoc:
  needs: [Build package]
  before_script: &sobiraka_pandoc_bs
    - pip install dist/*.tar.gz
    - apk add git weasyprint
    - mkdir -p .cache && [ -f .cache/$PANDOC_FILENAME ] || wget $PANDOC_URL -O .cache/$PANDOC_FILENAME
    - tar -xzf .cache/$PANDOC_FILENAME --strip-components=1 -C /usr

.test:
  image: docker
  needs: []
  before_script:
    - apk add make
  script:
    - make test PYTHON=$PYTHON PANDOC=$PANDOC

# endregion

# ------------------------------------------------------------------------------
# region Main

Build package:
  stage: Main
  script:
    - pip install setuptools
    - python setup.py sdist
  artifacts:
    paths:
      - dist

Build images:
  stage: Main
  needs: [Calculate hash]
  image: docker
  services: ['docker:dind']
  before_script:
    - apk add make
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script: |
    for TARGET in release release-latex; do
      # Try and download a relevant image
      docker pull $CI_REGISTRY_IMAGE/tmp/$TARGET:hash-$HASH \
        || docker pull $CI_REGISTRY_IMAGE/tmp/$TARGET:branch-$HASH \
        || true
      # Check if the image for this exact hash exists
      if docker images --format "{{.Repository}}:{{.Tag}}" | grep $CI_REGISTRY_IMAGE/tmp/$TARGET:hash-$HASH
      then
          # The image exists
          # Push it back as the current commit's image
          docker tag $CI_REGISTRY_IMAGE/tmp/$TARGET:hash-$HASH $CI_REGISTRY_IMAGE/tmp/$TARGET:commit-$CI_COMMIT_SHA
          docker tag $CI_REGISTRY_IMAGE/tmp/$TARGET:hash-$HASH $CI_REGISTRY_IMAGE/tmp/$TARGET:branch-$CI_COMMIT_BRANCH
          docker push $CI_REGISTRY_IMAGE/tmp/$TARGET:commit-$CI_COMMIT_SHA
          docker push $CI_REGISTRY_IMAGE/tmp/$TARGET:branch-$CI_COMMIT_BRANCH
      else
          # The image does not exist
          # Build it and then push as both the current commit's and the current hash's image
          make $TARGET
          docker tag sobiraka:$TARGET $CI_REGISTRY_IMAGE/tmp/$TARGET:hash-$HASH
          docker tag sobiraka:$TARGET $CI_REGISTRY_IMAGE/tmp/$TARGET:commit-$CI_COMMIT_SHA
          docker tag sobiraka:$TARGET $CI_REGISTRY_IMAGE/tmp/$TARGET:branch-$CI_COMMIT_BRANCH
          docker push $CI_REGISTRY_IMAGE/tmp/$TARGET:hash-$HASH
          docker push $CI_REGISTRY_IMAGE/tmp/$TARGET:commit-$CI_COMMIT_SHA
          docker push $CI_REGISTRY_IMAGE/tmp/$TARGET:branch-$CI_COMMIT_BRANCH
      fi
    done

Calculate hash:
  stage: Main
  needs: [Build package]
  image: docker
  script:
    - echo >> .dockerignore
    - echo '!Dockerfile' >> .dockerignore
    - echo '!.dockerignore' >> .dockerignore
    - echo '!.gitlab-ci.yml' >> .dockerignore
    - echo -e 'FROM docker\nWORKDIR /W\nADD . .' | docker build . --file - --tag md5sum
    - docker run --rm md5sum sh -c 'ls -lAh'
    - docker run --rm md5sum sh -c 'ls | sort | xargs tar c --to-stdout | md5sum | cut -d" " -f1' | sed 's/^/HASH=/' > .env
    - cat .env
  artifacts:
    reports:
      dotenv: .env

Documentation (HTML):
  stage: Main
  needs: [Build images]
  image: $CI_REGISTRY_IMAGE/tmp/release:commit-$CI_COMMIT_SHA
  script:
    - sobiraka web docs/docs.yaml --output html
  artifacts:
    paths:
      - html

Documentation (PDF):
  stage: Main
  needs: [Build images]
  image: $CI_REGISTRY_IMAGE/tmp/release:commit-$CI_COMMIT_SHA
  script:
    - sobiraka pdf docs/docs.yaml --output sobiraka.pdf
  artifacts:
    paths:
      - sobiraka.pdf

Lint:
  stage: Main
  extends: .sobiraka_pandoc
  variables:
    PYTHONPATH: src
  before_script:
    - *sobiraka_pandoc_bs
    - pip install pylint==3.3.1
  script:
    - pylint sobiraka src/sobiraka/files/themes/*/extension.py

# endregion

# ------------------------------------------------------------------------------
# region Test

Python 3.11, Pandoc 3.2:
  stage: Test with Python 3.11
  extends: .test
  variables:
    PANDOC: 3.2
    PYTHON: 3.11

Python 3.11, Pandoc 3.3:
  stage: Test with Python 3.11
  extends: .test
  variables:
    PANDOC: 3.3
    PYTHON: 3.11

Python 3.11, Pandoc 3.4:
  stage: Test with Python 3.11
  extends: .test
  variables:
    PANDOC: 3.4
    PYTHON: 3.11

Python 3.11, Pandoc 3.5:
  stage: Test with Python 3.11
  extends: .test
  variables:
    PANDOC: 3.5
    PYTHON: 3.11

Python 3.11, Pandoc 3.6:
  stage: Test with Python 3.11
  extends: .test
  variables:
    PANDOC: 3.6
    PYTHON: 3.11

Python 3.12, Pandoc 3.2:
  stage: Test with Python 3.12
  extends: .test
  variables:
    PANDOC: 3.2
    PYTHON: 3.12

Python 3.12, Pandoc 3.3:
  stage: Test with Python 3.12
  extends: .test
  variables:
    PANDOC: 3.3
    PYTHON: 3.12

Python 3.12, Pandoc 3.4:
  stage: Test with Python 3.12
  extends: .test
  variables:
    PANDOC: 3.4
    PYTHON: 3.12

Python 3.12, Pandoc 3.5:
  stage: Test with Python 3.12
  extends: .test
  variables:
    PANDOC: 3.5
    PYTHON: 3.12

Python 3.12, Pandoc 3.6:
  stage: Test with Python 3.12
  extends: .test
  variables:
    PANDOC: 3.6
    PYTHON: 3.12

Python 3.13, Pandoc 3.2:
  stage: Test with Python 3.13
  extends: .test
  variables:
    PANDOC: 3.2
    PYTHON: 3.13

Python 3.13, Pandoc 3.3:
  stage: Test with Python 3.13
  extends: .test
  variables:
    PANDOC: 3.3
    PYTHON: 3.13

Python 3.13, Pandoc 3.4:
  stage: Test with Python 3.13
  extends: .test
  variables:
    PANDOC: 3.4
    PYTHON: 3.13

Python 3.13, Pandoc 3.5:
  stage: Test with Python 3.13
  extends: .test
  variables:
    PANDOC: 3.5
    PYTHON: 3.13

Python 3.13, Pandoc 3.6:
  stage: Test with Python 3.13
  extends: .test
  variables:
    PANDOC: 3.6
    PYTHON: 3.13
  coverage: '/TOTAL .+ (\d+\.\d+)%/'

# endregion

# ------------------------------------------------------------------------------
# region Publish

Publish image:
  stage: Publish
  image: docker
  services: ['docker:dind']
  variables:
    GIT_STRATEGY: none
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script: |
    docker pull $CI_REGISTRY_IMAGE/tmp/release:commit-$CI_COMMIT_SHA
    docker pull $CI_REGISTRY_IMAGE/tmp/release-latex:commit-$CI_COMMIT_SHA
    
    # Publish under the current commit name
    docker tag $CI_REGISTRY_IMAGE/tmp/release:commit-$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sobiraka:$CI_COMMIT_SHA
    docker tag $CI_REGISTRY_IMAGE/tmp/release-latex:commit-$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sobiraka-latex:$CI_COMMIT_SHA
    docker push $CI_REGISTRY_IMAGE/sobiraka:$CI_COMMIT_SHA
    docker push $CI_REGISTRY_IMAGE/sobiraka-latex:$CI_COMMIT_SHA
    
    # Publish under the 'latest' name
    if [ $CI_COMMIT_REF_NAME == 'master' ]
    then
        docker tag $CI_REGISTRY_IMAGE/tmp/release:commit-$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sobiraka:latest
        docker tag $CI_REGISTRY_IMAGE/tmp/release-latex:commit-$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sobiraka-latex:latest
        docker push $CI_REGISTRY_IMAGE/sobiraka:latest
        docker push $CI_REGISTRY_IMAGE/sobiraka-latex:latest
    fi

pages:
  stage: Publish
  variables:
    GIT_STRATEGY: none
  script:
    - mv html public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_REF_NAME == 'master'

# endregion
