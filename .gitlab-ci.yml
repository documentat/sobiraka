stages:
  - manual
  - build
  - test

################################################################################

build-ci-env:
  stage: manual
  when: manual
  image: docker
  services: ['docker:dind']
  variables:
    GIT_STRATEGY: none
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker run -it --detach --name ci-env docker
    - docker exec ci-env apk add git make pigz py3-pip
    - docker commit ci-env $CI_REGISTRY_IMAGE/ci-env:1
    - docker push $CI_REGISTRY_IMAGE/ci-env:1


################################################################################

#build-dist:
#  stage: build
#  image: python:3.11-slim-bullseye
#  script:
#    - python setup.py sdist
#  artifacts:
#    paths:
#      - dist

################################################################################

.build-docker:
  stage: build
  image: $CI_REGISTRY_IMAGE/ci-env:1
  services: ['docker:dind']
  variables:
    DOCKER_BUILDKIT: 1
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
#    - docker pull $CI_REGISTRY_IMAGE/cache/$IMAGE:master || true
#    - docker pull $CI_REGISTRY_IMAGE/cache/$IMAGE:$CI_COMMIT_REF_NAME || true
#    - docker pull $CI_REGISTRY_IMAGE/cache/$IMAGE:$CI_COMMIT_SHA || true
#    - docker pull $CI_REGISTRY_IMAGE/cache/$IMAGE:$CI_COMMIT_BEFORE_SHA || true

    - docker buildx create --use
    - docker buildx install
    - >
      docker build .
      --file Dockerfile.$IMAGE
      --cache-from type=registry,ref=$CI_REGISTRY_IMAGE/cache/$IMAGE:master
      --cache-from type=registry,ref=$CI_REGISTRY_IMAGE/cache/$IMAGE:$CI_COMMIT_REF_NAME
      --cache-from type=registry,ref=$CI_REGISTRY_IMAGE/cache/$IMAGE:$CI_COMMIT_SHA
      --cache-from type=registry,ref=$CI_REGISTRY_IMAGE/cache/$IMAGE:$CI_COMMIT_BEFORE_SHA
      --cache-to type=registry,mode=max,ref=$CI_REGISTRY_IMAGE/cache/$IMAGE:$CI_COMMIT_SHA
      --output type=image,ref=$CI_REGISTRY_IMAGE/cache/$IMAGE:$CI_COMMIT_SHA
      --output type=image,name=$CI_REGISTRY_IMAGE/cache/$IMAGE:$CI_COMMIT_SHA
    - docker images

    - docker push $CI_REGISTRY_IMAGE/cache/$IMAGE:$CI_COMMIT_SHA

    - docker tag $CI_REGISTRY_IMAGE/cache/$IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/cache/$IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE/cache/$IMAGE:$CI_COMMIT_REF_NAME

    - docker save $CI_REGISTRY_IMAGE/cache/$IMAGE:$CI_COMMIT_SHA | pigz > $IMAGE.tar.gz
  artifacts:
    paths:
      - $IMAGE.tar.gz

build-tester:
  extends: .build-docker
  variables:
    IMAGE: tester

#build-release:
#  extends: .build-docker
#  variables:
#    IMAGE: release

################################################################################

#test-pip:
#  stage: test
#  needs: [build-tester, build-dist]
#  image: $CI_REGISTRY_IMAGE/ci-env:1
#  variables:
#    GIT_STRATEGY: fetch
#  services: ['docker:dind']
#  before_script:
#    - docker load < tester.tar.gz
#    - rm tester.tar.gz
#    - docker run --detach --rm --name tester -v $PWD:/PRJ --entrypoint dd tester if=/dev/zero of=/dev/null
#    - docker exec tester pip install dist/*.tar.gz
#    - rm dist/*.tar.gz
#  script:
#    - git checkout -- Makefile tests
#    - docker exec tester make tests
#  coverage: '/TOTAL .+ (\d+\.\d+)%/'