from abc import ABCMeta, abstractmethod
from typing import Sequence, TYPE_CHECKING

from sobiraka.models import Page, Volume
from sobiraka.models.config import Config, Config_HTML_Search
from sobiraka.processing.html import HeadTag
from sobiraka.utils import RelativePath

if TYPE_CHECKING:
    from sobiraka.processing import HtmlBuilder


class SearchIndexer(metaclass=ABCMeta):

    def __init__(self, builder: 'HtmlBuilder', volume: Volume, index_path: RelativePath):
        super().__init__()
        self.builder: HtmlBuilder = builder
        self.volume: Volume = volume
        self.search_config: Config_HTML_Search = volume.config.html.search
        self.index_path: RelativePath = index_path

    @staticmethod
    def default_index_path(volume: Volume) -> RelativePath:
        config: Config = volume.config
        return RelativePath(config.html.search.index_path or '_pagefind')

    async def initialize(self):
        pass

    @abstractmethod
    async def add_page(self, page: Page):
        ...

    async def finalize(self):
        pass

    @abstractmethod
    def results(self) -> set[RelativePath]:
        """
        Absolute paths to the files generated by the indexer.
        """

    @abstractmethod
    def head_tags(self) -> Sequence[HeadTag]:
        """
        The tags that must be added to the final HTML for the search to work.
        """
